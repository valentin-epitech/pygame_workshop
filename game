#!/usr/bin/env python3

# get started with pygame : https://www.pygame.org/wiki/GettingStarted

from os import stat
from re import S
import pygame
import random
import time
import sys

# help to use arrow cases

from pygame.locals import (
    RLEACCEL,
    K_q,
    K_d,
    K_x,
    K_RIGHT,
    K_LEFT,
    K_ESCAPE,
    KEYDOWN,
    QUIT,
)

SCREEN_WIDTH = 1280
SCREEN_HEIGHT = 720

# initialize the size of the window here

pygame.mixer.init()
pygame.init()

class PlayerOne(pygame.sprite.Sprite):
    def __init__(self):
        super(PlayerOne, self).__init__()
        # set it's texture with pygame.image.load()
        self.surf = pygame.image.load("source_file").convert_alpha()
        self.surf.set_colorkey((255, 255, 255), RLEACCEL)
        # init the first player's position with self.surf.get_rect()
        self.rect = self.surf.get_rect(center=(
                # horizontal potion
                # vertical potion
            ))
        
    def update(self, pressed_keys):
        if pressed_keys[K_q]:
            # move left using self.rect.move_ip()
        if pressed_keys[K_d]:
            # move right using self.rect.move_ip()

        # you also need to check that the sprite doesn't leave the screen !!!

    # set variables to be used later (like self.hp for exemple ?)

class PlayerTwo(pygame.sprite.Sprite):
    def __init__(self):
        # init the second player with the good width and height

    def update(self, pressed_keys):
        # move the player with arrow cases

class Bottle(pygame.sprite.Sprite):
    # init the bottle with speed and the widht and height

    def update(self):
        # destroy the bottle when hit the player

class Can(pygame.sprite.Sprite):
    def __init__(self):
        # init the can with speed and the widht and height 

    def update(self):
        # destroy the can when hit the player

class Background(pygame.sprite.Sprite):
    def __init__(self):
    # init the background

    def update(self):
        # update state of background 


def display_score(SCORE, X, player):
    # init the score of the player and display it

def game():
    # initialise the adding of ennemies

    # putting sprites in groups of sprites
    player = PlayerOne()
    player2 = PlayerTwo()
    background = pygame.sprite.Group()
    background.add(Background())
    all_sprites = pygame.sprite.Group()
    all_sprites.add(background)
    all_sprites.add(player)
    all_sprites.add(player2)

    # handle music

    # loop

        # handle collisions (pygame.sprite.spritecollide())
        # hande sprites removal
        # handle sound effects


    # create the game with features and the gameplay

def display_game_over(PLAYER):
    # display the game over when the player die

def game_over(all_sprites, PLAYER):
    # init the game over loop
